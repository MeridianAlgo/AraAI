name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-Beta'
      - 'v*.*.*-Alpha'

jobs:
  # Job 1: Create Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
      - name: Check if pre-release
        id: check_prerelease
        run: |
          if [[ "${{ steps.get_version.outputs.VERSION }}" =~ (Alpha|Beta|RC) ]]; then
            echo "PRERELEASE=true" >> $GITHUB_OUTPUT
          else
            echo "PRERELEASE=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Generate changelog
        id: changelog
        run: |
          if [ -f "CHANGELOG.md" ]; then
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            cat CHANGELOG.md | head -n 100 >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "CHANGELOG=No changelog available" >> $GITHUB_OUTPUT
          fi
          
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: ARA AI ${{ steps.get_version.outputs.VERSION }}
          body: |
            # ARA AI ${{ steps.get_version.outputs.VERSION }}
            
            ## ðŸš€ What's New
            
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## ðŸ“¦ Installation
            
            ```bash
            git clone https://github.com/MeridianAlgo/AraAI.git
            cd AraAI
            python setup_araai.py
            ```
            
            ## ðŸ§ª Quick Test
            
            ```bash
            python ara.py AAPL
            ```
            
            ## ðŸ“š Documentation
            
            See [README.md](https://github.com/MeridianAlgo/AraAI/blob/main/README.md) for full documentation.
            
          draft: false
          prerelease: ${{ steps.check_prerelease.outputs.PRERELEASE }}

  # Job 2: Build and Upload Assets
  build-assets:
    name: Build Release Assets - ${{ matrix.os }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
          
      - name: Build standalone executable (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          pyinstaller --onefile --name ara-ai ara.py
          
      - name: Build standalone executable (Windows)
        if: runner.os == 'Windows'
        run: |
          pyinstaller --onefile --name ara-ai.exe ara.py
          
      - name: Create distribution archive (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          tar -czf ara-ai-${{ runner.os }}.tar.gz dist/ara-ai README.md LICENSE requirements.txt
          
      - name: Create distribution archive (Windows)
        if: runner.os == 'Windows'
        run: |
          7z a ara-ai-Windows.zip dist/ara-ai.exe README.md LICENSE requirements.txt
          
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./ara-ai-${{ runner.os }}.*
          asset_name: ara-ai-${{ runner.os }}-${{ github.ref_name }}
          asset_content_type: application/octet-stream

  # Job 3: Test Release
  test-release:
    name: Test Release Installation
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.11']
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Test installation
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Test basic functionality
        run: |
          python -c "from meridianalgo.ultimate_ml import UltimateStockML; print('âœ“ Import successful')"
          
      - name: Run quick test
        run: python test_ultimate_system.py
        timeout-minutes: 10
        continue-on-error: true

  # Job 4: Publish to PyPI (Optional)
  publish-pypi:
    name: Publish to PyPI
    needs: [create-release, test-release]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'Beta') && !contains(github.ref, 'Alpha')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          
      - name: Build package
        run: python -m build
        
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/*
        continue-on-error: true

  # Job 5: Update Documentation
  update-docs:
    name: Update Documentation
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          
      - name: Update version in docs
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "Updating documentation for version $VERSION"
          
      - name: Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/
          git commit -m "docs: Update documentation for ${{ github.ref_name }}" || echo "No changes to commit"
          git push || echo "No changes to push"
