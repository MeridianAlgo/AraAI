name: System Monitoring & Health Checks

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  health-check:
    name: System Health Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Check system health
        run: |
          python -c "
          import sys
          from meridianalgo.ultimate_ml import UltimateStockML
          
          print('=== System Health Check ===')
          
          # Test initialization
          try:
              ml = UltimateStockML()
              print('✓ System initialization: OK')
          except Exception as e:
              print(f'✗ System initialization: FAILED - {e}')
              sys.exit(1)
          
          # Test data fetching
          try:
              from meridianalgo.data import DataManager
              dm = DataManager()
              df = dm.fetch_stock_data('AAPL', period='5d')
              if df is not None and not df.empty:
                  print('✓ Data fetching: OK')
              else:
                  print('✗ Data fetching: FAILED - No data')
                  sys.exit(1)
          except Exception as e:
              print(f'✗ Data fetching: FAILED - {e}')
              sys.exit(1)
          
          # Test model training
          try:
              ml.train_ultimate_models(max_symbols=3, period='3mo')
              print('✓ Model training: OK')
          except Exception as e:
              print(f'✗ Model training: FAILED - {e}')
              sys.exit(1)
          
          # Test prediction
          try:
              result = ml.predict_ultimate('AAPL', days=5)
              if result and 'predictions' in result:
                  print('✓ Prediction: OK')
              else:
                  print('✗ Prediction: FAILED - No results')
                  sys.exit(1)
          except Exception as e:
              print(f'✗ Prediction: FAILED - {e}')
              sys.exit(1)
          
          print('\n=== All Health Checks Passed ===')
          "
        timeout-minutes: 20
        
      - name: Create health report
        if: always()
        run: |
          echo "## System Health Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Health check completed. See logs for details." >> $GITHUB_STEP_SUMMARY

  dependency-check:
    name: Dependency Health Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Check for outdated dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-check pip-audit
          pip install -r requirements.txt
          pip list --outdated
          
      - name: Audit dependencies
        run: pip-audit --desc || echo "Audit completed with warnings"
        continue-on-error: true

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install memory-profiler psutil
          
      - name: Run performance benchmarks
        run: |
          python -c "
          import time
          import psutil
          import os
          from meridianalgo.ultimate_ml import UltimateStockML
          
          print('=== Performance Monitoring ===')
          
          process = psutil.Process(os.getpid())
          
          # Initial memory
          mem_start = process.memory_info().rss / 1024 / 1024
          print(f'Initial memory: {mem_start:.2f} MB')
          
          # Initialization
          start = time.time()
          ml = UltimateStockML()
          init_time = time.time() - start
          mem_after_init = process.memory_info().rss / 1024 / 1024
          print(f'Initialization: {init_time:.2f}s, Memory: {mem_after_init:.2f} MB')
          
          # Training
          start = time.time()
          ml.train_ultimate_models(max_symbols=10, period='6mo')
          train_time = time.time() - start
          mem_after_train = process.memory_info().rss / 1024 / 1024
          print(f'Training: {train_time:.2f}s, Memory: {mem_after_train:.2f} MB')
          
          # Prediction
          start = time.time()
          result = ml.predict_ultimate('AAPL', days=5)
          pred_time = time.time() - start
          mem_final = process.memory_info().rss / 1024 / 1024
          print(f'Prediction: {pred_time:.2f}s, Memory: {mem_final:.2f} MB')
          
          print(f'\nTotal time: {init_time + train_time + pred_time:.2f}s')
          print(f'Peak memory: {mem_final:.2f} MB')
          
          # Performance thresholds
          if train_time > 120:
              print('WARNING: Training time exceeds threshold')
          if pred_time > 10:
              print('WARNING: Prediction time exceeds threshold')
          if mem_final > 2000:
              print('WARNING: Memory usage exceeds threshold')
          "
        timeout-minutes: 25

  api-availability:
    name: External API Availability
    runs-on: ubuntu-latest
    
    steps:
      - name: Check Yahoo Finance API
        run: |
          curl -f https://query1.finance.yahoo.com/v8/finance/chart/AAPL || echo "Yahoo Finance API check failed"
        continue-on-error: true
        
      - name: Check Hugging Face API
        run: |
          curl -f https://huggingface.co/ || echo "Hugging Face API check failed"
        continue-on-error: true
        
      - name: API Status Summary
        run: |
          echo "## API Availability Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "External API health checks completed." >> $GITHUB_STEP_SUMMARY
