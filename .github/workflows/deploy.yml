name: Deploy to Production

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  deploy-pypi:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel setuptools
          
      - name: Build package
        run: python -m build
        
      - name: Check package
        run: twine check dist/*
        
      - name: Publish to Test PyPI
        if: github.event.inputs.environment == 'staging'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
        run: twine upload --repository testpypi dist/* --skip-existing
        
      - name: Publish to PyPI
        if: github.event_name == 'release' || github.event.inputs.environment == 'production'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: twine upload dist/* --skip-existing

  deploy-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Extract version
        id: version
        run: |
          VERSION=$(python -c "import meridianalgo; print(meridianalgo.__version__)")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            meridianalgo/araai:latest
            meridianalgo/araai:${{ steps.version.outputs.version }}
          cache-from: type=registry,ref=meridianalgo/araai:buildcache
          cache-to: type=registry,ref=meridianalgo/araai:buildcache,mode=max

  create-github-release:
    name: Create GitHub Release Assets
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Build distribution packages
        run: |
          python -m pip install --upgrade pip build
          python -m build
          
      - name: Create release archive
        run: |
          tar -czf araai-source.tar.gz \
            meridianalgo/ \
            ara.py \
            ara_fast.py \
            setup.py \
            requirements.txt \
            README.md \
            LICENSE \
            CREDITS.md
          
      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*
            araai-source.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-deployment:
    name: Notify Deployment Status
    needs: [deploy-pypi, deploy-docker, create-github-release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Deployment Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| PyPI | ${{ needs.deploy-pypi.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker | ${{ needs.deploy-docker.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| GitHub Release | ${{ needs.create-github-release.result }} |" >> $GITHUB_STEP_SUMMARY
