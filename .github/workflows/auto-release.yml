name: Automated Release

on:
  push:
    branches:
      - main
    paths:
      - 'meridianalgo/__init__.py'
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - beta
          - alpha

jobs:
  # Job 1: Check if version changed
  check-version:
    name: Check Version Change
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      version_changed: ${{ steps.check_change.outputs.changed }}
      
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - name: Get current version
        id: get_version
        run: |
          VERSION=$(python -c "import meridianalgo; print(meridianalgo.__version__)")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"
          
      - name: Check if version changed
        id: check_change
        run: |
          git diff HEAD^ HEAD -- meridianalgo/__init__.py | grep -q "__version__" && echo "changed=true" >> $GITHUB_OUTPUT || echo "changed=false" >> $GITHUB_OUTPUT

  # Job 2: Run full test suite
  test-before-release:
    name: Pre-Release Testing
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11']
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install numpy pandas scipy
          pip install xgboost lightgbm scikit-learn
          pip install torch --index-url https://download.pytorch.org/whl/cpu
          pip install transformers tokenizers accelerate
          pip install yfinance requests rich typing-extensions
          pip install pytest pytest-cov
          
      - name: Run tests
        run: pytest tests/ -v --tb=short
        timeout-minutes: 30

  # Job 3: Create GitHub Release
  create-release:
    name: Create GitHub Release
    needs: [check-version, test-before-release]
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.version_changed == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get version
        id: version
        run: |
          VERSION=$(python -c "import meridianalgo; print(meridianalgo.__version__)")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          
      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Generate changelog
        id: changelog
        run: |
          if [ -f "docs/CHANGELOG.md" ]; then
            # Extract latest version changes
            CHANGELOG=$(sed -n '/^## \[/,/^## \[/p' docs/CHANGELOG.md | head -n -1 | tail -n +2)
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGELOG" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "changelog=No changelog available" >> $GITHUB_OUTPUT
          fi
          
      - name: Create Git Tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a "${{ steps.version.outputs.tag }}" -m "Release ${{ steps.version.outputs.tag }}"
          git push origin "${{ steps.version.outputs.tag }}"
          
      - name: Create GitHub Release
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          release_name: ARA AI ${{ steps.version.outputs.tag }}
          body: |
            # ARA AI ${{ steps.version.outputs.tag }}
            
            ## What's New
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            
            ```bash
            git clone https://github.com/MeridianAlgo/AraAI.git
            cd AraAI
            python setup_araai.py
            ```
            
            ## Quick Start
            
            ```bash
            python ara.py AAPL
            ```
            
            ## Documentation
            
            - [Installation Guide](https://github.com/MeridianAlgo/AraAI/blob/main/docs/INSTALLATION.md)
            - [User Manual](https://github.com/MeridianAlgo/AraAI/blob/main/docs/USER_MANUAL.md)
            - [Full Documentation](https://github.com/MeridianAlgo/AraAI/tree/main/docs)
            
            ## System Requirements
            
            - Python 3.9+
            - 4GB RAM minimum
            - Windows, Linux, or macOS
            
            ---
            
            **Full Changelog**: https://github.com/MeridianAlgo/AraAI/blob/main/docs/CHANGELOG.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, 'Beta') || contains(steps.version.outputs.version, 'Alpha') }}

  # Job 4: Build and upload release assets
  build-assets:
    name: Build Release Assets
    needs: [check-version, create-release]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools
          
      - name: Build distribution
        run: python -m build
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          path: dist/

  # Job 5: Publish to PyPI (optional)
  publish-pypi:
    name: Publish to PyPI
    needs: [check-version, create-release, build-assets]
    runs-on: ubuntu-latest
    if: |
      needs.check-version.outputs.version_changed == 'true' && 
      !contains(needs.check-version.outputs.version, 'Beta') && 
      !contains(needs.check-version.outputs.version, 'Alpha')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          
      - name: Build package
        run: python -m build
        
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/* --skip-existing
        continue-on-error: true

  # Job 6: Update documentation
  update-docs:
    name: Update Documentation
    needs: [check-version, create-release]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update README badges
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          sed -i "s/version-[^-]*-orange/version-$VERSION-orange/g" README.md
          
      - name: Commit changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add README.md
          git diff --quiet && git diff --staged --quiet || git commit -m "docs: Update version badges to ${{ needs.check-version.outputs.version }}"
          git push
        continue-on-error: true

  # Job 7: Notify on completion
  notify:
    name: Release Notification
    needs: [check-version, create-release, build-assets]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Release Summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Version: ${{ needs.check-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- Release Created: ${{ needs.create-release.result == 'success' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Assets Built: ${{ needs.build-assets.result == 'success' }}" >> $GITHUB_STEP_SUMMARY
