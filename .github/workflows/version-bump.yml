name: Version Bump

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
          - beta
          - alpha
      create_release:
        description: 'Create release after bump'
        required: false
        type: boolean
        default: true

jobs:
  bump-version:
    name: Bump Version
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Get current version
        id: current
        run: |
          VERSION=$(python -c "import meridianalgo; print(meridianalgo.__version__)")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"
          
      - name: Calculate new version
        id: new
        run: |
          CURRENT="${{ steps.current.outputs.version }}"
          BUMP_TYPE="${{ github.event.inputs.bump_type }}"
          
          # Remove any suffix (Beta, Alpha)
          BASE=$(echo $CURRENT | sed 's/-.*$//')
          
          # Split version
          IFS='.' read -ra PARTS <<< "$BASE"
          MAJOR="${PARTS[0]}"
          MINOR="${PARTS[1]}"
          PATCH="${PARTS[2]}"
          
          # Bump version
          case $BUMP_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              NEW_VERSION="$MAJOR.$MINOR.$PATCH"
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              NEW_VERSION="$MAJOR.$MINOR.$PATCH"
              ;;
            patch)
              PATCH=$((PATCH + 1))
              NEW_VERSION="$MAJOR.$MINOR.$PATCH"
              ;;
            beta)
              PATCH=$((PATCH + 1))
              NEW_VERSION="$MAJOR.$MINOR.$PATCH-Beta"
              ;;
            alpha)
              PATCH=$((PATCH + 1))
              NEW_VERSION="$MAJOR.$MINOR.$PATCH-Alpha"
              ;;
          esac
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"
          
      - name: Update version in files
        run: |
          NEW_VERSION="${{ steps.new.outputs.version }}"
          
          # Update __init__.py
          sed -i "s/__version__ = \".*\"/__version__ = \"$NEW_VERSION\"/g" meridianalgo/__init__.py
          
          # Update setup.py
          sed -i "s/version='.*'/version='$NEW_VERSION'/g" setup.py
          
          # Update README.md
          sed -i "s/version-[^-]*-orange/version-$NEW_VERSION-orange/g" README.md
          
          echo "Updated version to $NEW_VERSION"
          
      - name: Update CHANGELOG
        run: |
          NEW_VERSION="${{ steps.new.outputs.version }}"
          DATE=$(date +%Y-%m-%d)
          
          if [ -f "docs/CHANGELOG.md" ]; then
            # Add new version entry
            sed -i "3i\\## [$NEW_VERSION] - $DATE\n\n### Added\n- Version bump to $NEW_VERSION\n" docs/CHANGELOG.md
          fi
          
      - name: Commit changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add meridianalgo/__init__.py setup.py README.md docs/CHANGELOG.md
          git commit -m "chore: Bump version to ${{ steps.new.outputs.version }}"
          git push
          
      - name: Create tag
        run: |
          git tag -a "v${{ steps.new.outputs.version }}" -m "Release v${{ steps.new.outputs.version }}"
          git push origin "v${{ steps.new.outputs.version }}"
          
      - name: Trigger release workflow
        if: github.event.inputs.create_release == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'auto-release.yml',
              ref: 'main'
            })
